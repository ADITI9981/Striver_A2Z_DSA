class Solution {
public:
    // Check if color c is safe for node
    bool isSafe(int node, vector<int>& color, vector<int> adj[], int c) {
        for (int neighbor : adj[node]) {
            if (color[neighbor] == c)
                return false;
        }
        return true;
    }

    // Recursive function
    bool solve(int node, vector<int>& color, int m, int v, vector<int> adj[]) {
        if (node == v) return true;

        for (int c = 1; c <= m; c++) {
            if (isSafe(node, color, adj, c)) {
                color[node] = c;
                if (solve(node + 1, color, m, v, adj)) return true;
                color[node] = 0; // backtrack
            }
        }
        return false;
    }

    // Main function
    bool graphColoring(int v, vector<vector<int>>& edges, int m) {
        vector<int> adj[v];
        for (auto& edge : edges) {
            int u = edge[0], w = edge[1];
            adj[u].push_back(w);
            adj[w].push_back(u); // Undirected
        }

        vector<int> color(v, 0);
        return solve(0, color, m, v, adj);
    }
};
