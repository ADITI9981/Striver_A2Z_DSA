class Solution {
  private:
    bool detect(int src,vector<vector<int>>& edges,vector<int> &vis){
        vis[src] = 1;
        queue<pair<int,int>> q;
        q.push({src,-1});
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();

            for(auto currnode:edges[node]){
                if(!vis[currnode]){
                    vis[currnode]=1;
                    q.push({currnode,node});
                }
                else if(parent!=currnode){
                    return true;
                }
            }
        }
        return false;
    }
  public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
       vector<vector<int>> adj(V);
        for(auto &e : edges) {
            int u = e[0], v = e[1];   // (0-based input as per your failing case)
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> vis(V, 0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(detect(i,adj,vis)) return true;
            }
        }
        return false;
    }
};
