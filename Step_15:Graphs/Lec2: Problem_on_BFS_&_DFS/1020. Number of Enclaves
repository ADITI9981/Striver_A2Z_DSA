class Solution {
private:
    void dfs(int row,int col,vector<vector<int>> &vis,vector<vector<int>> &board,int n,int m,int delrow[],int delcol[] ){
    vis[row][col]=1;
    for(int i=0;i<4;i++){
        int nrow = row+delrow[i];
        int ncol = col+delcol[i];
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && board[nrow][ncol]==1){
            dfs(nrow,ncol,vis,board,n,m,delrow,delcol);
        }
    }
   }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int count=0;

        int delrow[] = {0,-1,0,+1};
        int delcol[] = {-1,0,+1,0};
        vector<vector<int>> vis(n,vector<int>(m,0));

        for(int i=0;i<m;i++){
            if(!vis[0][i] && grid[0][i]==1){
                dfs(0,i,vis,grid,n,m,delrow,delcol);
            }
            if(!vis[n-1][i] && grid[n-1][i]==1){
                dfs(n-1,i,vis,grid,n,m,delrow,delcol);
            }
        }
        for(int j=0;j<n;j++){
            if(!vis[j][0] && grid[j][0]==1){
                dfs(j,0,vis,grid,n,m,delrow,delcol);
            }
            if(!vis[j][m-1] && grid[j][m-1]==1){
                dfs(j,m-1,vis,grid,n,m,delrow,delcol);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    count++;
                }
            }
        }
        return count;
    }
};
