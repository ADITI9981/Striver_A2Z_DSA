class Solution {
  public:
    bool dfscheck(int node, vector<int>& vis, vector<int>& pathvis, vector<vector<int>>& edges){
        vis[node] = 1;
        pathvis[node] = 1;
        
        for(auto it : edges[node]){
            if(!vis[it]){
                if(dfscheck(it, vis, pathvis, edges) == true) return true;
            }
            else if(pathvis[it]){
                return true; // cycle found
            }
        }
        pathvis[node] = 0;
        return false;
    }

    bool isCyclic(int V, vector<vector<int>> &edges) {
        vector<int> vis(V, 0);
        vector<int> pathvis(V, 0);
        vector<vector<int>> adj(V);
        for(const auto& e : edges){
            if(e.size() == 2){
                int u = e[0], v = e[1];
                if(0 <= u && u < V && 0 <= v && v < V) adj[u].push_back(v);
            }
        }
        
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                if(dfscheck(i, vis, pathvis, adj) == true) 
                    return true;
            }
        }
        return false;
    }
};
