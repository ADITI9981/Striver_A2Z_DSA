class Solution {
   private:
    bool dfs(int node, int parent, vector<vector<int>>&adj,vector<int> &vis){
        vis[node] = 1;
        
        for(auto currnode:adj[node]){
            if(!vis[currnode]){
                if(dfs(currnode,node,adj,vis)) return true;
            }
            else if(parent!=currnode){
                return true;
            }
        }
    return false;
    }
  public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
         vector<vector<int>> adj(V);
        for(auto &e : edges) {
            int u = e[0], v = e[1];   // (0-based input as per your failing case)
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> vis(V, 0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(dfs(i,-1,adj,vis)) return true;
            }
        }
        return false;
    }
};
