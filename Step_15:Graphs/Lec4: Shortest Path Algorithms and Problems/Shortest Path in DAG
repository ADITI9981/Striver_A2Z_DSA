// User function Template for C++
class Solution {
  private:
    void toposort(int node,vector<pair<int,int>> adj[],int vis[],stack<int> &st){
        vis[node]=1;
        for(auto it:adj[node]){
            int v = it.first;
            if(!vis[v]){
                toposort(v,adj,vis,st);
            }
        }
        st.push(node);
    }
  public:
    vector<int> shortestPath(int N, int M, vector<vector<int>>& edges) {
        // code here
        vector<pair<int,int>> adj[N];
        for(int i=0;i<M;i++){
            int u=edges[i][0];
            int v = edges[i][1];
            int wt =edges[i][2];
            adj[u].push_back({v,wt});
        }
        
        //find topo sort
        int vis[N]={0};
        stack<int> st;
        for(int i=0;i<N;i++){
            if(!vis[i]){
                toposort(i,adj,vis,st);
            }
        }
        
        const int INF = 1e9;
        vector<int> dist(N, INF);
        dist[0] = 0;
        
        while(!st.empty()){
            int node = st.top();
            st.pop();
            if (dist[node] == INF) continue; 
            for(auto it: adj[node]){
                int v = it.first;
                int wt = it.second;
                if(dist[node]+wt <dist[v]){
                    dist[v]=dist[node]+wt;
                }
            }
        }
        for (int i = 0; i < N; i++) if (dist[i] == INF) dist[i] = -1;
        return dist;
    }
};

