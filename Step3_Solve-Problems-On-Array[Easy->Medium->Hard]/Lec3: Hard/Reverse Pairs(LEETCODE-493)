class Solution {
public:
int countpairs(vector<int> &arr,int low,int mid,int high){
    int right=mid+1;
    int count=0;
    for(int i=low;i<=mid;i++){
        while (right<=high && arr[i] > 2ll*arr[right]) right++;
        count += (right-(mid+1));
    }
    return count;
}
int  mergeSort(vector<int>& arr, int l, int r) {
        int count=0;
        if(l>=r)return count;
        int mid=(l+r)/2;
        count += mergeSort(arr,l,mid);
        count += mergeSort(arr,mid+1,r);
        count += countpairs(arr,l,mid,r);
        merge(arr,l,mid,r);
        return count;
    }
    void merge(vector<int>& arr,int l,int mid,int r){
        vector<int> temp;
        int left=l;
        int right=mid+1;
        while(left<=mid&&right<=r){
            if(arr[left]<=arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            else{
                temp.push_back(arr[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.push_back(arr[left]);
            left++;
        }
        while(right<=r){
            temp.push_back(arr[right]);
            right++;
        }
        for(int i=l;i<=r;i++){
            arr[i]=temp[i-l];
        }
    }
    int reversePairs(vector<int>& nums) {
        int n= nums.size();
        return mergeSort(nums,0,n-1);
    }
};
